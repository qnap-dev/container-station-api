Resource
==================

.. exec::
    import subprocess as sp
    import json
    ret = sp.check_output('curl -sq -XPOST -c cookies.txt -d "username=admin&password=${QPASSWORD}" http://${QIP}:${QPORT}/containerstation/api/v1/login', shell=True)
    try:
        auth = json.loads(ret)
        if 'error' in auth:
            raise Exception
    except:
        raise Exception('Unauthorized: ' + str(ret))

.. contents::

.. http:get:: /api/v1/container/(string:container_type)/(string:container_id)/all


    :param container_type: ``lxc``, ``docker``
    :param container_id: container id

    resource list

    **Example request**

    .. sourcecode:: bash

        $ curl -sq -XGET -b cookies.txt \
            http://${QIP}:${QPORT}/containerstation/api/v1/container/lxc/utest/all

    **Example response**

    .. runcode:: json

        curl -sq -XPOST -b cookies.txt -d '{"type": "lxc", "name": "utest", "image": "ubuntu-bionic", "tag": "latest"}' http://${QIP}:${QPORT}/containerstation/api/v1/container  -o /dev/null; 
        curl -sq -XGET -b cookies.txt 
           http://${QIP}:${QPORT}/containerstation/api/v1/container/lxc/utest/all
           | python -mjson.tool

Auto start
----------

.. http:put:: /api/v1/container/(string:container_type)/(string:container_id)/autostart/(string:state)

    Update container auto start setting.

    :param container_type: ``lxc``, ``docker``
    :param container_id: container id
    :param state: ``on``, ``off``

    **Example request**

    .. sourcecode:: bash

        $ curl -sq -XPUT -b cookies.txt \
            http://${QIP}:${QPORT}/containerstation/api/v1/container/lxc/utest/autostart/on
        $ curl -sq -XPUT -b cookies.txt \
            http://${QIP}:${QPORT}/containerstation/api/v1/container/lxc/utest/autostart/off

    **Example response**

    .. runcode:: json

        curl -sq -XPUT -b cookies.txt
            http://${QIP}:${QPORT}/containerstation/api/v1/container/lxc/utest/autostart/on
            | python -mjson.tool;
        curl -sq -XPUT -b cookies.txt
            http://${QIP}:${QPORT}/containerstation/api/v1/container/lxc/utest/autostart/off
            | python -mjson.tool;

Port Forwarding
---------------

.. http:post:: /api/v1/container/(string:container_type)/(string:container_id)/network/port

    Add port forwarding.

    :param container_type: ``lxc``, ``docker``
    :param container_id: container id

    **Example request**

    .. sourcecode:: bash

        $ curl -sq -XPOST -b cookies.txt -d '[12345, 12345, "tcp"]' \
            http://${QIP}:${QPORT}/containerstation/api/v1/container/lxc/utest/network/port

    **Example response**

    .. runcode:: json

        curl -sq -XPOST -b cookies.txt -d '[12345, 12345, "tcp"]' 
            http://${QIP}:${QPORT}/containerstation/api/v1/container/lxc/utest/network/port
            | python -mjson.tool;

.. http:delete:: /api/v1/container/(string:container_type)/(string:container_id)/network/port

    Delete port forwarding.

    :param container_type: ``lxc``, ``docker``
    :param container_id: container id

    **Example request**

    .. sourcecode:: bash

        $ curl -sq -XDELETE -b cookies.txt -d '[12345, 12345, "tcp"]' \
            http://${QIP}:${QPORT}/containerstation/api/v1/container/lxc/utest/network/port

    **Example response**

    .. runcode:: json

        curl -sq -XDELETE -b cookies.txt -d '[12345, 12345, "tcp"]' 
            http://${QIP}:${QPORT}/containerstation/api/v1/container/lxc/utest/network/port
            | python -mjson.tool;


.. http:post:: /api/v1/container/(string:container_type)/(string:container_id)/network/ports

    Edit port forwarding settings.

    :param container_type: ``lxc``
    :param container_id: container id

    **Example request**

    .. sourcecode:: bash

        $ curl -sq -XPOST -b cookies.txt -d \
            '[[111, 222, "udp"], [333, 444, "tcp"]]' \
            http://${QIP}:${QPORT}/containerstation/api/v1/container/lxc/utest/network/ports

    **Example response**

    .. runcode:: json

        curl -sq -XPOST -b cookies.txt -d
            '[[111, 222, "udp"], [333, 444, "tcp"]]' 
            http://${QIP}:${QPORT}/containerstation/api/v1/container/lxc/utest/network/ports
            | python -mjson.tool;

    **Example request: remove all settings**

    .. sourcecode:: bash

        $ curl -sq -XPOST -b cookies.txt -d '[]' \
            http://${QIP}:${QPORT}/containerstation/api/v1/container/lxc/utest/network/ports

    **Example response: remove all settings**

    .. runcode:: json

        curl -sq -XPOST -b cookies.txt -d '[]' 
            http://${QIP}:${QPORT}/containerstation/api/v1/container/lxc/utest/network/ports
            | python -mjson.tool;


Devices 
--------

.. http:get:: /api/v1/resource/device

    Get available device list.
    The device allows access inside container.


    **Example request**

    .. sourcecode:: bash

        $ curl -sq -XGET -b cookies.txt http://${QIP}:${QPORT}/containerstation/api/v1/resource/device

    **Example response**

    .. runcode:: json

        curl -sq -XGET -b cookies.txt http://${QIP}:${QPORT}/containerstation/api/v1/resource/device | python -mjson.tool;

.. http:post:: /api/v1/container/(string:container_type)/(string:container_id)/resource/device

    Add device permission with the specified device.

    :param container_type: ``lxc``, ``docker``
    :param container_id: container id
    
    :access is a sequence of one or more of the following letters: 
        r — allows tasks to read from the specified device 

        w — allows tasks to write to the specified device 

        m — allows tasks to create device files that do not yet exist **[required]**


    **Example request**

    .. sourcecode:: bash

        $ curl -sq -XPOST -b cookies.txt -d '["allow", "Input_(13)", "rwm"]' \
            http://${QIP}:${QPORT}/containerstation/api/v1/container/lxc/utest/resource/device

    **Example response**

    .. runcode:: json

        curl -sq -XPOST -b cookies.txt -d '["allow", "Input_(13)", "rwm"]'
            http://${QIP}:${QPORT}/containerstation/api/v1/container/lxc/utest/resource/device
            | python -mjson.tool;

.. http:delete:: /api/v1/container/(string:container_type)/(string:container_id)/resource/device

    Delete device permission with the specified device.

    :param container_type: ``lxc``, ``docker``
    :param container_id: container id

    **Example request**

    .. sourcecode:: bash

        $ curl -sq -XDELETE -b cookies.txt -d '["allow", "Input_(13)", "rwm"]' \
            http://${QIP}:${QPORT}/containerstation/api/v1/container/lxc/utest/resource/device

    **Example response**

    .. runcode:: json

        curl -sq -XDELETE -b cookies.txt -d '["allow", "Input_(13)", "rwm"]'
            http://${QIP}:${QPORT}/containerstation/api/v1/container/lxc/utest/resource/device
            | python -mjson.tool;


.. http:post:: /api/v1/container/(string:container_type)/(string:container_id)/resource/devices

    Add multiple devices permission in one request. It will automatically remove original settings before add it.

    :param container_type: ``lxc``, ``docker``
    :param container_id: container id
    
    :access is a sequence of one or more of the following letters: 
        r — allows tasks to read from the specified device 

        w — allows tasks to write to the specified device 

        m — allows tasks to create device files that do not yet exist **[required]**


    **Example request**

    .. sourcecode:: bash

        $ curl -sq -XPOST -b cookies.txt -d \
            '[["allow", "Input_(13)", "rwm"], ["allow", "TTY_(4)", "rwm"]]' \
            http://${QIP}:${QPORT}/containerstation/api/v1/container/lxc/utest/resource/devices

    **Example response**

    .. runcode:: json

        curl -sq -XPOST -b cookies.txt -d '[["allow", "Input_(13)", "rwm"], ["allow", "TTY_(4)", "rwm"]]'
            http://${QIP}:${QPORT}/containerstation/api/v1/container/lxc/utest/resource/devices
            | python -mjson.tool;

    **Example request: remove all settings**

    .. sourcecode:: bash

        $ curl -sq -XPOST -b cookies.txt -d '[]' \
            http://${QIP}:${QPORT}/containerstation/api/v1/container/lxc/utest/resource/devices

    **Example response: remove all settings**

    .. runcode:: json

        curl -sq -XPOST -b cookies.txt -d '[]'
            http://${QIP}:${QPORT}/containerstation/api/v1/container/lxc/utest/resource/devices
            | python -mjson.tool;

CPU and memory limits
---------------------

.. http:post:: /api/v1/container/(string:container_type)/(string:container_id)/resource/limit

    Add CPU and memory limits.

    :param container_type: ``lxc``, ``docker``
    :param container_id: container id
    :reqjson int cputime: (optional) [10-999]. cpu usage time in milliseconds(ms)
    :reqjson int cpuweight: (optional) [2-1024]. relative cpu usage
    :reqjson string memory: (optional) Unit in MB. Must higher than 64m

    **Example request**

    .. sourcecode:: bash

        $ curl -sq -XPOST -b cookies.txt -d \
            '{
                "cputime": 100, 
                "cpuweight": 600, 
                "memory": "512m"
            }' http://${QIP}:${QPORT}/containerstation/api/v1/container/lxc/utest/resource/limit

    **Example response**

    .. runcode:: json

        curl -sq -XPOST -b cookies.txt -d '{"cputime": 100, "cpuweight": 600, "memory": "512m"}'
            http://${QIP}:${QPORT}/containerstation/api/v1/container/lxc/utest/resource/limit
            | python -mjson.tool;

.. http:delete:: /api/v1/container/(string:container_type)/(string:container_id)/resource/limit

    Delete resource limitation.

    :param container_type: ``lxc``, ``docker``
    :param container_id: container id

    **Example request**

    .. sourcecode:: bash

        $ curl -sq -XDELETE -b cookies.txt -d '{"cputime": 0}' \
            http://${QIP}:${QPORT}/containerstation/api/v1/container/lxc/utest/resource/limit

    **Example response**

    .. runcode:: json

        curl -sq -XDELETE -b cookies.txt -d '{"cputime": 0}'
            http://${QIP}:${QPORT}/containerstation/api/v1/container/lxc/utest/resource/limit
            | python -mjson.tool;

Storage
----------

.. http:post:: /api/v1/container/(string:container_type)/(string:container_id)/volume/host

    Edit volume from host settings.

    :param container_type: ``lxc``
    :param container_id: container id
    :reqjson object host_path: Host path
    :reqjson string bind: Mount point in container
    :reqjson boolean ro: Read-only 

    **Example request**

    .. sourcecode:: bash

        $ curl -sq -XPOST -b cookies.txt -d \
            '{
                "/test": {
                    "bind": "/test1", 
                    "ro": false 
                },
                "/test/selenium": {
                    "bind": "/test2", 
                    "ro": true 
                }
            }' \
            http://${QIP}:${QPORT}/containerstation/api/v1/container/lxc/utest/volume/host

    **Example response**

    .. runcode:: json

        curl -sq -XPOST -b cookies.txt -d
            '{"/test": {"bind": "/test1", "ro": false },"/test/selenium": {"bind": "/test2", "ro": true }}' 
            http://${QIP}:${QPORT}/containerstation/api/v1/container/lxc/utest/volume/host
            | python -mjson.tool;

    **Example request: remove all settings**

    .. sourcecode:: bash

        $ curl -sq -XPOST -b cookies.txt -d '{}' \
            http://${QIP}:${QPORT}/containerstation/api/v1/container/lxc/utest/volume/host

    **Example response: remove all settings**

    .. runcode:: json

        curl -sq -XPOST -b cookies.txt -d '{}' 
            http://${QIP}:${QPORT}/containerstation/api/v1/container/lxc/utest/volume/host
            | python -mjson.tool;
